com.mysql.clusterj.connectstring=localhost
com.mysql.clusterj.database=hops_db
com.mysql.clusterj.connection.pool.size=1
com.mysql.clusterj.max.transactions=1024

#determines the number of seconds to wait until the first “live” node is detected.
#If this amount of time is exceeded with no live nodes detected,
#then the method immediately returns a negative value. Default=30
com.mysql.clusterj.connect.timeout.before=30

#determines the number of seconds to wait after the first “live” node is 
#detected for all nodes to become active. If this amount of time is exceeded
#without all nodes becoming active, then the method immediately returns a 
#value greater than zero. Default=20
com.mysql.clusterj.connect.timeout.after=20

#The number of seconds to wait for all sessions to be closed when reconnecting a SessionFactory
#due to network failures. The default, 0, indicates that the automatic reconnection to the cluster
#due to network failures is disabled. Reconnection can be enabled by using the method
#SessionFactory.reconnect(int timeout) and specifying a new timeout value. 
com.mysql.clusterj.connection.reconnect.timeout=5

#clusterj caching
#set io.hops.enable.clusterj.dto.cache and io.hops.enable.clusterj.session.cache to use dto and session caching provided by clusterj
io.hops.enable.clusterj.dto.cache=false
io.hops.enable.clusterj.session.cache=false

com.mysql.clusterj.max.cached.instances=256
com.mysql.clusterj.max.cached.sessions=0
com.mysql.clusterj.warmup.cached.sessions=0

io.hops.metadata.ndb.mysqlserver.data_source_class_name = com.mysql.cj.jdbc.MysqlDataSource

io.hops.metadata.ndb.mysqlserver.host=localhost
io.hops.metadata.ndb.mysqlserver.port=3306
io.hops.metadata.ndb.mysqlserver.username=username
io.hops.metadata.ndb.mysqlserver.password=password
io.hops.metadata.ndb.mysqlserver.connection_pool_size=1

#size of the session pool. should be altreat as big as the number of active RPC handling Threads in the system
io.hops.session.pool.size=1000

#Session is reused Random.getNextInt(0,io.hops.session.reuse.count) times and then it is GCed
#use smaller values if using java 6.
#if you use java 7 or higer then use G1GC and there is no need to close sessions. use Int.MAX_VALUE
io.hops.session.reuse.count=2147483647

