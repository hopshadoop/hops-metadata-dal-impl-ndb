diff --git a/storage/ndb/clusterj/clusterj-api/src/main/java/com/mysql/clusterj/DynamicObject.java b/storage/ndb/clusterj/clusterj-api/src/main/java/com/mysql/clusterj/DynamicObject.java
index 70c2c4a8..ecb927b2 100644
--- a/storage/ndb/clusterj/clusterj-api/src/main/java/com/mysql/clusterj/DynamicObject.java
+++ b/storage/ndb/clusterj/clusterj-api/src/main/java/com/mysql/clusterj/DynamicObject.java
@@ -56,14 +56,14 @@ public abstract class DynamicObject {
         return delegate.found();
     }
 
-    @SuppressWarnings("deprecation")
-    protected void finalize() throws Throwable {
-        try {
-            if (delegate != null) {
-                delegate.release();
-            }
-        } finally {
-            super.finalize();
-        }
-    }
+//    @SuppressWarnings("deprecation")
+//    protected void finalize() throws Throwable {
+//        try {
+//            if (delegate != null) {
+//                delegate.release();
+//            }
+//        } finally {
+//            super.finalize();
+//        }
+//    }
 }
diff --git a/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/SessionFactoryImpl.java b/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/SessionFactoryImpl.java
index 58f36b4c..5660d882 100644
--- a/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/SessionFactoryImpl.java
+++ b/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/SessionFactoryImpl.java
@@ -158,6 +158,7 @@ public class SessionFactoryImpl implements SessionFactory, Constants {
             // if not using connection pooling, create a new session factory
             result = new SessionFactoryImpl(props);
         }
+        logger.info("HopsFS created a ClusterJ VERSION sesseion factory.");
         return result;
     }
 
diff --git a/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/metadata/DomainTypeHandlerImpl.java b/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/metadata/DomainTypeHandlerImpl.java
index 16fbbb0b..9cf6fde3 100644
--- a/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/metadata/DomainTypeHandlerImpl.java
+++ b/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/metadata/DomainTypeHandlerImpl.java
@@ -64,9 +64,9 @@ import java.util.Map;
  */
 public class DomainTypeHandlerImpl<T> extends AbstractDomainTypeHandlerImpl<T> {
 
-    public interface Finalizable {
-        void finalize() throws Throwable;
-    }
+//    public interface Finalizable {
+//        void finalize() throws Throwable;
+//    }
 
     /** The domain class. */
     Class<T> cls;
@@ -124,7 +124,7 @@ public class DomainTypeHandlerImpl<T> extends AbstractDomainTypeHandlerImpl<T> {
                 throw new ClusterJUserException(local.message(
                         "ERR_Not_Persistence_Capable_Type", name));
             }
-            proxyInterfaces = new Class<?>[] {cls, Finalizable.class};
+            proxyInterfaces = new Class<?>[] {cls};
             // Get the table name from Persistence Capable annotation
             persistenceCapable = cls.getAnnotation(PersistenceCapable.class);
             if (persistenceCapable == null) {
diff --git a/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/util/JDK14LoggerImpl.java b/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/util/JDK14LoggerImpl.java
index b762b229..0ebaabcd 100644
--- a/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/util/JDK14LoggerImpl.java
+++ b/storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/util/JDK14LoggerImpl.java
@@ -53,66 +53,66 @@ public class JDK14LoggerImpl implements Logger {
     }
 
     public void detail(String message) {
-        Throwable t = new Throwable();
-        StackTraceElement[] stack = t.getStackTrace();
-        StackTraceElement element = stack[1];
-        String className = element.getClassName();
-        String methodName = element.getMethodName();
-        delegate.logp(Level.FINEST, className, methodName, message);
+        // Throwable t = new Throwable();
+        // StackTraceElement[] stack = t.getStackTrace();
+        // StackTraceElement element = stack[1];
+        // String className = element.getClassName();
+        // String methodName = element.getMethodName();
+        // delegate.logp(Level.FINEST, className, methodName, message);
     }
 
     public void debug(String message) {
-        Throwable t = new Throwable();
-        StackTraceElement[] stack = t.getStackTrace();
-        StackTraceElement element = stack[1];
-        String className = element.getClassName();
-        String methodName = element.getMethodName();
-        delegate.logp(Level.FINER, className, methodName, message);
+        // Throwable t = new Throwable();
+        // StackTraceElement[] stack = t.getStackTrace();
+        // StackTraceElement element = stack[1];
+        // String className = element.getClassName();
+        // String methodName = element.getMethodName();
+        // delegate.logp(Level.FINER, className, methodName, message);
     }
 
     public void trace(String message) {
-        Throwable t = new Throwable();
-        StackTraceElement[] stack = t.getStackTrace();
-        StackTraceElement element = stack[1];
-        String className = element.getClassName();
-        String methodName = element.getMethodName();
-        delegate.logp(Level.FINE, className, methodName, message);
+        // Throwable t = new Throwable();
+        // StackTraceElement[] stack = t.getStackTrace();
+        // StackTraceElement element = stack[1];
+        // String className = element.getClassName();
+        // String methodName = element.getMethodName();
+        // delegate.logp(Level.FINE, className, methodName, message);
     }
 
     public void info(String message) {
-        Throwable t = new Throwable();
-        StackTraceElement[] stack = t.getStackTrace();
-        StackTraceElement element = stack[1];
-        String className = element.getClassName();
-        String methodName = element.getMethodName();
-        delegate.logp(Level.INFO, className, methodName, message);
+        // Throwable t = new Throwable();
+        // StackTraceElement[] stack = t.getStackTrace();
+        // StackTraceElement element = stack[1];
+        // String className = element.getClassName();
+        // String methodName = element.getMethodName();
+        // delegate.logp(Level.INFO, className, methodName, message);
     }
 
     public void warn(String message) {
-        Throwable t = new Throwable();
-        StackTraceElement[] stack = t.getStackTrace();
-        StackTraceElement element = stack[1];
-        String className = element.getClassName();
-        String methodName = element.getMethodName();
-        delegate.logp(Level.WARNING, className, methodName, message);
+        // Throwable t = new Throwable();
+        // StackTraceElement[] stack = t.getStackTrace();
+        // StackTraceElement element = stack[1];
+        // String className = element.getClassName();
+        // String methodName = element.getMethodName();
+        // delegate.logp(Level.WARNING, className, methodName, message);
     }
 
     public void error(String message) {
-        Throwable t = new Throwable();
-        StackTraceElement[] stack = t.getStackTrace();
-        StackTraceElement element = stack[1];
-        String className = element.getClassName();
-        String methodName = element.getMethodName();
-        delegate.logp(Level.SEVERE, className, methodName, message);
+        // Throwable t = new Throwable();
+        // StackTraceElement[] stack = t.getStackTrace();
+        // StackTraceElement element = stack[1];
+        // String className = element.getClassName();
+        // String methodName = element.getMethodName();
+        // delegate.logp(Level.SEVERE, className, methodName, message);
     }
 
     public void fatal(String message) {
-        Throwable t = new Throwable();
-        StackTraceElement[] stack = t.getStackTrace();
-        StackTraceElement element = stack[1];
-        String className = element.getClassName();
-        String methodName = element.getMethodName();
-        delegate.logp(Level.SEVERE, className, methodName, message);
+        // Throwable t = new Throwable();
+        // StackTraceElement[] stack = t.getStackTrace();
+        // StackTraceElement element = stack[1];
+        // String className = element.getClassName();
+        // String methodName = element.getMethodName();
+        // delegate.logp(Level.SEVERE, className, methodName, message);
     }
 
 }
diff --git a/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/ClusterTransactionImpl.java b/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/ClusterTransactionImpl.java
index ccedf03e..bf5aaba1 100644
--- a/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/ClusterTransactionImpl.java
+++ b/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/ClusterTransactionImpl.java
@@ -127,6 +127,9 @@ class ClusterTransactionImpl implements ClusterTransaction {
 
     private List<Operation> operationsToCheck = new ArrayList<Operation>();
 
+    private boolean isPartitionKeySet  = false;
+    private final boolean HOPS_PK_FIX = true;
+
     public ClusterTransactionImpl(ClusterConnectionImpl clusterConnectionImpl,
             DbImpl db, Dictionary ndbDictionary, String joinTransactionId) {
         this.db = db;
@@ -144,6 +147,7 @@ class ClusterTransactionImpl implements ClusterTransaction {
         if (ndbTransaction != null) {
             ndbTransaction.close();
             ndbTransaction = null;
+            isPartitionKeySet = false;
         }
     }
 
@@ -656,7 +660,14 @@ class ClusterTransactionImpl implements ClusterTransaction {
             throw new ClusterJFatalInternalException(
                     local.message("ERR_Partition_Key_Null"));
         }
-        this.partitionKey = (PartitionKeyImpl)partitionKey;
+        if (HOPS_PK_FIX) {
+            if (!isPartitionKeySet) {
+                this.partitionKey = (PartitionKeyImpl)partitionKey;
+                isPartitionKeySet = true;
+            }
+        } else {
+            this.partitionKey = (PartitionKeyImpl) partitionKey;
+        }
     }
 
     public String getCoordinatedTransactionId() {
diff --git a/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/DbImpl.java b/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/DbImpl.java
index 6b1b396f..ee835930 100644
--- a/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/DbImpl.java
+++ b/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/DbImpl.java
@@ -271,7 +271,11 @@ class DbImpl implements com.mysql.clusterj.core.store.Db {
             handleError (ndbTransaction, ndb);
             return ndbTransaction;
         }
-        key_part_ptrArray = Key_part_ptrArray.create(keyPartsSize + 1);
+
+	      while (key_part_ptrArray == null) {
+	          key_part_ptrArray = Key_part_ptrArray.create(keyPartsSize + 1);
+	      }
+
         try {
             // the key part pointer array has one entry for each key part
             // plus one extra for "null-terminated array concept"
diff --git a/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/NdbRecordSmartValueHandlerImpl.java b/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/NdbRecordSmartValueHandlerImpl.java
index 44366a6e..c10d4ffa 100644
--- a/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/NdbRecordSmartValueHandlerImpl.java
+++ b/storage/ndb/clusterj/clusterj-tie/src/main/java/com/mysql/clusterj/tie/NdbRecordSmartValueHandlerImpl.java
@@ -83,15 +83,15 @@ public class NdbRecordSmartValueHandlerImpl implements SmartValueHandler {
     /** Finalize this object. This method is called by the garbage collector
      * when the proxy that delegates to this object is no longer reachable.
      */
-    @SuppressWarnings("deprecation")
-    protected void finalize() throws Throwable {
-        if (logger.isDetailEnabled()) logger.detail("NdbRecordSmartValueHandler.finalize");
-        try {
-            release();
-        } finally {
-            super.finalize();
-        }
-    }
+//    @SuppressWarnings("deprecation")
+//    protected void finalize() throws Throwable {
+//        if (logger.isDetailEnabled()) logger.detail("NdbRecordSmartValueHandler.finalize");
+//        try {
+//            release();
+//        } finally {
+//            super.finalize();
+//        }
+//    }
 
     /** Release any resources associated with this object.
      * This method is called by the owner of this object.
